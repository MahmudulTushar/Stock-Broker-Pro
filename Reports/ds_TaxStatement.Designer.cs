//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Reports {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ds_TaxStatement")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ds_TaxStatement : global::System.Data.DataSet {
        
        private SP_Tax_StatementDataTable tableSP_Tax_Statement;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ds_TaxStatement() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ds_TaxStatement(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["SP_Tax_Statement"] != null)) {
                    base.Tables.Add(new SP_Tax_StatementDataTable(ds.Tables["SP_Tax_Statement"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SP_Tax_StatementDataTable SP_Tax_Statement {
            get {
                return this.tableSP_Tax_Statement;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ds_TaxStatement cln = ((ds_TaxStatement)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["SP_Tax_Statement"] != null)) {
                    base.Tables.Add(new SP_Tax_StatementDataTable(ds.Tables["SP_Tax_Statement"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSP_Tax_Statement = ((SP_Tax_StatementDataTable)(base.Tables["SP_Tax_Statement"]));
            if ((initTable == true)) {
                if ((this.tableSP_Tax_Statement != null)) {
                    this.tableSP_Tax_Statement.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ds_TaxStatement";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ds_TaxStatement.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSP_Tax_Statement = new SP_Tax_StatementDataTable();
            base.Tables.Add(this.tableSP_Tax_Statement);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSP_Tax_Statement() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ds_TaxStatement ds = new ds_TaxStatement();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void SP_Tax_StatementRowChangeEventHandler(object sender, SP_Tax_StatementRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SP_Tax_StatementDataTable : global::System.Data.TypedTableBase<SP_Tax_StatementRow> {
            
            private global::System.Data.DataColumn columnInstrument;
            
            private global::System.Data.DataColumn columnBuyQty;
            
            private global::System.Data.DataColumn columnBuyAmount;
            
            private global::System.Data.DataColumn columnSellQty;
            
            private global::System.Data.DataColumn columnSellAmount;
            
            private global::System.Data.DataColumn columnBuyAmountOfSale;
            
            private global::System.Data.DataColumn columnCommission;
            
            private global::System.Data.DataColumn columnCurrentStock;
            
            private global::System.Data.DataColumn columnBuyRate;
            
            private global::System.Data.DataColumn columnMarketPrice;
            
            private global::System.Data.DataColumn columnDataColumn1;
            
            private global::System.Data.DataColumn columnDataColumn2;
            
            private global::System.Data.DataColumn columnDataColumn3;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SP_Tax_StatementDataTable() {
                this.TableName = "SP_Tax_Statement";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SP_Tax_StatementDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SP_Tax_StatementDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstrumentColumn {
                get {
                    return this.columnInstrument;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuyQtyColumn {
                get {
                    return this.columnBuyQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuyAmountColumn {
                get {
                    return this.columnBuyAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SellQtyColumn {
                get {
                    return this.columnSellQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SellAmountColumn {
                get {
                    return this.columnSellAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuyAmountOfSaleColumn {
                get {
                    return this.columnBuyAmountOfSale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommissionColumn {
                get {
                    return this.columnCommission;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentStockColumn {
                get {
                    return this.columnCurrentStock;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuyRateColumn {
                get {
                    return this.columnBuyRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MarketPriceColumn {
                get {
                    return this.columnMarketPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataColumn1Column {
                get {
                    return this.columnDataColumn1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataColumn2Column {
                get {
                    return this.columnDataColumn2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataColumn3Column {
                get {
                    return this.columnDataColumn3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SP_Tax_StatementRow this[int index] {
                get {
                    return ((SP_Tax_StatementRow)(this.Rows[index]));
                }
            }
            
            public event SP_Tax_StatementRowChangeEventHandler SP_Tax_StatementRowChanging;
            
            public event SP_Tax_StatementRowChangeEventHandler SP_Tax_StatementRowChanged;
            
            public event SP_Tax_StatementRowChangeEventHandler SP_Tax_StatementRowDeleting;
            
            public event SP_Tax_StatementRowChangeEventHandler SP_Tax_StatementRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSP_Tax_StatementRow(SP_Tax_StatementRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SP_Tax_StatementRow AddSP_Tax_StatementRow(string Instrument, int BuyQty, double BuyAmount, int SellQty, double SellAmount, double BuyAmountOfSale, double Commission, double CurrentStock, double BuyRate, decimal MarketPrice, double DataColumn1, double DataColumn2, double DataColumn3) {
                SP_Tax_StatementRow rowSP_Tax_StatementRow = ((SP_Tax_StatementRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Instrument,
                        BuyQty,
                        BuyAmount,
                        SellQty,
                        SellAmount,
                        BuyAmountOfSale,
                        Commission,
                        CurrentStock,
                        BuyRate,
                        MarketPrice,
                        DataColumn1,
                        DataColumn2,
                        DataColumn3};
                rowSP_Tax_StatementRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSP_Tax_StatementRow);
                return rowSP_Tax_StatementRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SP_Tax_StatementDataTable cln = ((SP_Tax_StatementDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SP_Tax_StatementDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnInstrument = base.Columns["Instrument"];
                this.columnBuyQty = base.Columns["BuyQty"];
                this.columnBuyAmount = base.Columns["BuyAmount"];
                this.columnSellQty = base.Columns["SellQty"];
                this.columnSellAmount = base.Columns["SellAmount"];
                this.columnBuyAmountOfSale = base.Columns["BuyAmountOfSale"];
                this.columnCommission = base.Columns["Commission"];
                this.columnCurrentStock = base.Columns["CurrentStock"];
                this.columnBuyRate = base.Columns["BuyRate"];
                this.columnMarketPrice = base.Columns["MarketPrice"];
                this.columnDataColumn1 = base.Columns["DataColumn1"];
                this.columnDataColumn2 = base.Columns["DataColumn2"];
                this.columnDataColumn3 = base.Columns["DataColumn3"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnInstrument = new global::System.Data.DataColumn("Instrument", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstrument);
                this.columnBuyQty = new global::System.Data.DataColumn("BuyQty", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuyQty);
                this.columnBuyAmount = new global::System.Data.DataColumn("BuyAmount", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuyAmount);
                this.columnSellQty = new global::System.Data.DataColumn("SellQty", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSellQty);
                this.columnSellAmount = new global::System.Data.DataColumn("SellAmount", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSellAmount);
                this.columnBuyAmountOfSale = new global::System.Data.DataColumn("BuyAmountOfSale", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuyAmountOfSale);
                this.columnCommission = new global::System.Data.DataColumn("Commission", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommission);
                this.columnCurrentStock = new global::System.Data.DataColumn("CurrentStock", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentStock);
                this.columnBuyRate = new global::System.Data.DataColumn("BuyRate", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuyRate);
                this.columnMarketPrice = new global::System.Data.DataColumn("MarketPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarketPrice);
                this.columnDataColumn1 = new global::System.Data.DataColumn("DataColumn1", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataColumn1);
                this.columnDataColumn2 = new global::System.Data.DataColumn("DataColumn2", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataColumn2);
                this.columnDataColumn3 = new global::System.Data.DataColumn("DataColumn3", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataColumn3);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SP_Tax_StatementRow NewSP_Tax_StatementRow() {
                return ((SP_Tax_StatementRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SP_Tax_StatementRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SP_Tax_StatementRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SP_Tax_StatementRowChanged != null)) {
                    this.SP_Tax_StatementRowChanged(this, new SP_Tax_StatementRowChangeEvent(((SP_Tax_StatementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SP_Tax_StatementRowChanging != null)) {
                    this.SP_Tax_StatementRowChanging(this, new SP_Tax_StatementRowChangeEvent(((SP_Tax_StatementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SP_Tax_StatementRowDeleted != null)) {
                    this.SP_Tax_StatementRowDeleted(this, new SP_Tax_StatementRowChangeEvent(((SP_Tax_StatementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SP_Tax_StatementRowDeleting != null)) {
                    this.SP_Tax_StatementRowDeleting(this, new SP_Tax_StatementRowChangeEvent(((SP_Tax_StatementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSP_Tax_StatementRow(SP_Tax_StatementRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ds_TaxStatement ds = new ds_TaxStatement();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SP_Tax_StatementDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SP_Tax_StatementRow : global::System.Data.DataRow {
            
            private SP_Tax_StatementDataTable tableSP_Tax_Statement;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SP_Tax_StatementRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSP_Tax_Statement = ((SP_Tax_StatementDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Instrument {
                get {
                    try {
                        return ((string)(this[this.tableSP_Tax_Statement.InstrumentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Instrument\' in table \'SP_Tax_Statement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSP_Tax_Statement.InstrumentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BuyQty {
                get {
                    try {
                        return ((int)(this[this.tableSP_Tax_Statement.BuyQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuyQty\' in table \'SP_Tax_Statement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSP_Tax_Statement.BuyQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double BuyAmount {
                get {
                    try {
                        return ((double)(this[this.tableSP_Tax_Statement.BuyAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuyAmount\' in table \'SP_Tax_Statement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSP_Tax_Statement.BuyAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SellQty {
                get {
                    try {
                        return ((int)(this[this.tableSP_Tax_Statement.SellQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SellQty\' in table \'SP_Tax_Statement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSP_Tax_Statement.SellQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SellAmount {
                get {
                    try {
                        return ((double)(this[this.tableSP_Tax_Statement.SellAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SellAmount\' in table \'SP_Tax_Statement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSP_Tax_Statement.SellAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double BuyAmountOfSale {
                get {
                    try {
                        return ((double)(this[this.tableSP_Tax_Statement.BuyAmountOfSaleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuyAmountOfSale\' in table \'SP_Tax_Statement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSP_Tax_Statement.BuyAmountOfSaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Commission {
                get {
                    try {
                        return ((double)(this[this.tableSP_Tax_Statement.CommissionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Commission\' in table \'SP_Tax_Statement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSP_Tax_Statement.CommissionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double CurrentStock {
                get {
                    try {
                        return ((double)(this[this.tableSP_Tax_Statement.CurrentStockColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentStock\' in table \'SP_Tax_Statement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSP_Tax_Statement.CurrentStockColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double BuyRate {
                get {
                    try {
                        return ((double)(this[this.tableSP_Tax_Statement.BuyRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuyRate\' in table \'SP_Tax_Statement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSP_Tax_Statement.BuyRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MarketPrice {
                get {
                    try {
                        return ((decimal)(this[this.tableSP_Tax_Statement.MarketPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MarketPrice\' in table \'SP_Tax_Statement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSP_Tax_Statement.MarketPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DataColumn1 {
                get {
                    try {
                        return ((double)(this[this.tableSP_Tax_Statement.DataColumn1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataColumn1\' in table \'SP_Tax_Statement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSP_Tax_Statement.DataColumn1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DataColumn2 {
                get {
                    try {
                        return ((double)(this[this.tableSP_Tax_Statement.DataColumn2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataColumn2\' in table \'SP_Tax_Statement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSP_Tax_Statement.DataColumn2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DataColumn3 {
                get {
                    try {
                        return ((double)(this[this.tableSP_Tax_Statement.DataColumn3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataColumn3\' in table \'SP_Tax_Statement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSP_Tax_Statement.DataColumn3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstrumentNull() {
                return this.IsNull(this.tableSP_Tax_Statement.InstrumentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstrumentNull() {
                this[this.tableSP_Tax_Statement.InstrumentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuyQtyNull() {
                return this.IsNull(this.tableSP_Tax_Statement.BuyQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuyQtyNull() {
                this[this.tableSP_Tax_Statement.BuyQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuyAmountNull() {
                return this.IsNull(this.tableSP_Tax_Statement.BuyAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuyAmountNull() {
                this[this.tableSP_Tax_Statement.BuyAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSellQtyNull() {
                return this.IsNull(this.tableSP_Tax_Statement.SellQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSellQtyNull() {
                this[this.tableSP_Tax_Statement.SellQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSellAmountNull() {
                return this.IsNull(this.tableSP_Tax_Statement.SellAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSellAmountNull() {
                this[this.tableSP_Tax_Statement.SellAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuyAmountOfSaleNull() {
                return this.IsNull(this.tableSP_Tax_Statement.BuyAmountOfSaleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuyAmountOfSaleNull() {
                this[this.tableSP_Tax_Statement.BuyAmountOfSaleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommissionNull() {
                return this.IsNull(this.tableSP_Tax_Statement.CommissionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommissionNull() {
                this[this.tableSP_Tax_Statement.CommissionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentStockNull() {
                return this.IsNull(this.tableSP_Tax_Statement.CurrentStockColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentStockNull() {
                this[this.tableSP_Tax_Statement.CurrentStockColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuyRateNull() {
                return this.IsNull(this.tableSP_Tax_Statement.BuyRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuyRateNull() {
                this[this.tableSP_Tax_Statement.BuyRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMarketPriceNull() {
                return this.IsNull(this.tableSP_Tax_Statement.MarketPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMarketPriceNull() {
                this[this.tableSP_Tax_Statement.MarketPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataColumn1Null() {
                return this.IsNull(this.tableSP_Tax_Statement.DataColumn1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataColumn1Null() {
                this[this.tableSP_Tax_Statement.DataColumn1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataColumn2Null() {
                return this.IsNull(this.tableSP_Tax_Statement.DataColumn2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataColumn2Null() {
                this[this.tableSP_Tax_Statement.DataColumn2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataColumn3Null() {
                return this.IsNull(this.tableSP_Tax_Statement.DataColumn3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataColumn3Null() {
                this[this.tableSP_Tax_Statement.DataColumn3Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SP_Tax_StatementRowChangeEvent : global::System.EventArgs {
            
            private SP_Tax_StatementRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SP_Tax_StatementRowChangeEvent(SP_Tax_StatementRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SP_Tax_StatementRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591