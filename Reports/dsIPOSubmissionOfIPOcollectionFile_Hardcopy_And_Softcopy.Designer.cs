//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Reports {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsIPOSubmissionOfIPOcollectionFile_Hardcopy_And_Softcopy")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsIPOSubmissionOfIPOcollectionFile_Hardcopy_And_Softcopy : global::System.Data.DataSet {
        
        private DataTable1DataTable tableDataTable1;
        
        private NRB_Hard_Copy_To_DESCDataTable tableNRB_Hard_Copy_To_DESC;
        
        private Authorized_Person_DeclarationDataTable tableAuthorized_Person_Declaration;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsIPOSubmissionOfIPOcollectionFile_Hardcopy_And_Softcopy() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsIPOSubmissionOfIPOcollectionFile_Hardcopy_And_Softcopy(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["DataTable1"] != null)) {
                    base.Tables.Add(new DataTable1DataTable(ds.Tables["DataTable1"]));
                }
                if ((ds.Tables["NRB Hard Copy To DESC"] != null)) {
                    base.Tables.Add(new NRB_Hard_Copy_To_DESCDataTable(ds.Tables["NRB Hard Copy To DESC"]));
                }
                if ((ds.Tables["Authorized Person Declaration"] != null)) {
                    base.Tables.Add(new Authorized_Person_DeclarationDataTable(ds.Tables["Authorized Person Declaration"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataTable1DataTable DataTable1 {
            get {
                return this.tableDataTable1;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NRB_Hard_Copy_To_DESCDataTable NRB_Hard_Copy_To_DESC {
            get {
                return this.tableNRB_Hard_Copy_To_DESC;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Authorized_Person_DeclarationDataTable Authorized_Person_Declaration {
            get {
                return this.tableAuthorized_Person_Declaration;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsIPOSubmissionOfIPOcollectionFile_Hardcopy_And_Softcopy cln = ((dsIPOSubmissionOfIPOcollectionFile_Hardcopy_And_Softcopy)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DataTable1"] != null)) {
                    base.Tables.Add(new DataTable1DataTable(ds.Tables["DataTable1"]));
                }
                if ((ds.Tables["NRB Hard Copy To DESC"] != null)) {
                    base.Tables.Add(new NRB_Hard_Copy_To_DESCDataTable(ds.Tables["NRB Hard Copy To DESC"]));
                }
                if ((ds.Tables["Authorized Person Declaration"] != null)) {
                    base.Tables.Add(new Authorized_Person_DeclarationDataTable(ds.Tables["Authorized Person Declaration"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDataTable1 = ((DataTable1DataTable)(base.Tables["DataTable1"]));
            if ((initTable == true)) {
                if ((this.tableDataTable1 != null)) {
                    this.tableDataTable1.InitVars();
                }
            }
            this.tableNRB_Hard_Copy_To_DESC = ((NRB_Hard_Copy_To_DESCDataTable)(base.Tables["NRB Hard Copy To DESC"]));
            if ((initTable == true)) {
                if ((this.tableNRB_Hard_Copy_To_DESC != null)) {
                    this.tableNRB_Hard_Copy_To_DESC.InitVars();
                }
            }
            this.tableAuthorized_Person_Declaration = ((Authorized_Person_DeclarationDataTable)(base.Tables["Authorized Person Declaration"]));
            if ((initTable == true)) {
                if ((this.tableAuthorized_Person_Declaration != null)) {
                    this.tableAuthorized_Person_Declaration.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsIPOSubmissionOfIPOcollectionFile_Hardcopy_And_Softcopy";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsIPOSubmissionOfIPOcollectionFile_Hardcopy_And_Softcopy.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDataTable1 = new DataTable1DataTable();
            base.Tables.Add(this.tableDataTable1);
            this.tableNRB_Hard_Copy_To_DESC = new NRB_Hard_Copy_To_DESCDataTable();
            base.Tables.Add(this.tableNRB_Hard_Copy_To_DESC);
            this.tableAuthorized_Person_Declaration = new Authorized_Person_DeclarationDataTable();
            base.Tables.Add(this.tableAuthorized_Person_Declaration);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDataTable1() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNRB_Hard_Copy_To_DESC() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAuthorized_Person_Declaration() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsIPOSubmissionOfIPOcollectionFile_Hardcopy_And_Softcopy ds = new dsIPOSubmissionOfIPOcollectionFile_Hardcopy_And_Softcopy();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void DataTable1RowChangeEventHandler(object sender, DataTable1RowChangeEvent e);
        
        public delegate void NRB_Hard_Copy_To_DESCRowChangeEventHandler(object sender, NRB_Hard_Copy_To_DESCRowChangeEvent e);
        
        public delegate void Authorized_Person_DeclarationRowChangeEventHandler(object sender, Authorized_Person_DeclarationRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataTable1DataTable : global::System.Data.TypedTableBase<DataTable1Row> {
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnRef;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnSubject;
            
            private global::System.Data.DataColumn columnBody;
            
            private global::System.Data.DataColumn columnTotal_NoOf_Applicants;
            
            private global::System.Data.DataColumn columnMarketLotTotalTK;
            
            private global::System.Data.DataColumn columnTotal_Amount;
            
            private global::System.Data.DataColumn columnTotal_Block_Amount;
            
            private global::System.Data.DataColumn columnEND;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1DataTable() {
                this.TableName = "DataTable1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTable1DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataTable1DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefColumn {
                get {
                    return this.columnRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BodyColumn {
                get {
                    return this.columnBody;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Total_NoOf_ApplicantsColumn {
                get {
                    return this.columnTotal_NoOf_Applicants;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MarketLotTotalTKColumn {
                get {
                    return this.columnMarketLotTotalTK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Total_AmountColumn {
                get {
                    return this.columnTotal_Amount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Total_Block_AmountColumn {
                get {
                    return this.columnTotal_Block_Amount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ENDColumn {
                get {
                    return this.columnEND;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1Row this[int index] {
                get {
                    return ((DataTable1Row)(this.Rows[index]));
                }
            }
            
            public event DataTable1RowChangeEventHandler DataTable1RowChanging;
            
            public event DataTable1RowChangeEventHandler DataTable1RowChanged;
            
            public event DataTable1RowChangeEventHandler DataTable1RowDeleting;
            
            public event DataTable1RowChangeEventHandler DataTable1RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataTable1Row(DataTable1Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1Row AddDataTable1Row(string Date, string Ref, string Address, string Subject, string Body, decimal Total_NoOf_Applicants, decimal MarketLotTotalTK, decimal Total_Amount, decimal Total_Block_Amount, string END) {
                DataTable1Row rowDataTable1Row = ((DataTable1Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Date,
                        Ref,
                        Address,
                        Subject,
                        Body,
                        Total_NoOf_Applicants,
                        MarketLotTotalTK,
                        Total_Amount,
                        Total_Block_Amount,
                        END};
                rowDataTable1Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowDataTable1Row);
                return rowDataTable1Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DataTable1DataTable cln = ((DataTable1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DataTable1DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDate = base.Columns["Date"];
                this.columnRef = base.Columns["Ref"];
                this.columnAddress = base.Columns["Address"];
                this.columnSubject = base.Columns["Subject"];
                this.columnBody = base.Columns["Body"];
                this.columnTotal_NoOf_Applicants = base.Columns["Total_NoOf_Applicants"];
                this.columnMarketLotTotalTK = base.Columns["MarketLotTotalTK"];
                this.columnTotal_Amount = base.Columns["Total_Amount"];
                this.columnTotal_Block_Amount = base.Columns["Total_Block_Amount"];
                this.columnEND = base.Columns["END"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnRef = new global::System.Data.DataColumn("Ref", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRef);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnSubject = new global::System.Data.DataColumn("Subject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnBody = new global::System.Data.DataColumn("Body", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBody);
                this.columnTotal_NoOf_Applicants = new global::System.Data.DataColumn("Total_NoOf_Applicants", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal_NoOf_Applicants);
                this.columnMarketLotTotalTK = new global::System.Data.DataColumn("MarketLotTotalTK", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarketLotTotalTK);
                this.columnTotal_Amount = new global::System.Data.DataColumn("Total_Amount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal_Amount);
                this.columnTotal_Block_Amount = new global::System.Data.DataColumn("Total_Block_Amount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal_Block_Amount);
                this.columnEND = new global::System.Data.DataColumn("END", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEND);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1Row NewDataTable1Row() {
                return ((DataTable1Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DataTable1Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DataTable1Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataTable1RowChanged != null)) {
                    this.DataTable1RowChanged(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataTable1RowChanging != null)) {
                    this.DataTable1RowChanging(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataTable1RowDeleted != null)) {
                    this.DataTable1RowDeleted(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataTable1RowDeleting != null)) {
                    this.DataTable1RowDeleting(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataTable1Row(DataTable1Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsIPOSubmissionOfIPOcollectionFile_Hardcopy_And_Softcopy ds = new dsIPOSubmissionOfIPOcollectionFile_Hardcopy_And_Softcopy();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataTable1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NRB_Hard_Copy_To_DESCDataTable : global::System.Data.TypedTableBase<NRB_Hard_Copy_To_DESCRow> {
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnRef;
            
            private global::System.Data.DataColumn columnN_Address;
            
            private global::System.Data.DataColumn columnSubject;
            
            private global::System.Data.DataColumn columnN_Body;
            
            private global::System.Data.DataColumn columnTotal_NRB_Applicants;
            
            private global::System.Data.DataColumn columnSuccessful;
            
            private global::System.Data.DataColumn columnUnSuccessful;
            
            private global::System.Data.DataColumn columnCurrency;
            
            private global::System.Data.DataColumn columnEND_N;
            
            private global::System.Data.DataColumn columnNo_Joint_Draft;
            
            private global::System.Data.DataColumn columnS_Draft;
            
            private global::System.Data.DataColumn columnTotal_Draft;
            
            private global::System.Data.DataColumn _columnTotal_Amount_Draft_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NRB_Hard_Copy_To_DESCDataTable() {
                this.TableName = "NRB Hard Copy To DESC";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NRB_Hard_Copy_To_DESCDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected NRB_Hard_Copy_To_DESCDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefColumn {
                get {
                    return this.columnRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn N_AddressColumn {
                get {
                    return this.columnN_Address;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn N_BodyColumn {
                get {
                    return this.columnN_Body;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Total_NRB_ApplicantsColumn {
                get {
                    return this.columnTotal_NRB_Applicants;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SuccessfulColumn {
                get {
                    return this.columnSuccessful;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnSuccessfulColumn {
                get {
                    return this.columnUnSuccessful;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrencyColumn {
                get {
                    return this.columnCurrency;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn END_NColumn {
                get {
                    return this.columnEND_N;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn No_Joint_DraftColumn {
                get {
                    return this.columnNo_Joint_Draft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn S_DraftColumn {
                get {
                    return this.columnS_Draft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Total_DraftColumn {
                get {
                    return this.columnTotal_Draft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _Total_Amount_Draft_Column {
                get {
                    return this._columnTotal_Amount_Draft_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NRB_Hard_Copy_To_DESCRow this[int index] {
                get {
                    return ((NRB_Hard_Copy_To_DESCRow)(this.Rows[index]));
                }
            }
            
            public event NRB_Hard_Copy_To_DESCRowChangeEventHandler NRB_Hard_Copy_To_DESCRowChanging;
            
            public event NRB_Hard_Copy_To_DESCRowChangeEventHandler NRB_Hard_Copy_To_DESCRowChanged;
            
            public event NRB_Hard_Copy_To_DESCRowChangeEventHandler NRB_Hard_Copy_To_DESCRowDeleting;
            
            public event NRB_Hard_Copy_To_DESCRowChangeEventHandler NRB_Hard_Copy_To_DESCRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNRB_Hard_Copy_To_DESCRow(NRB_Hard_Copy_To_DESCRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NRB_Hard_Copy_To_DESCRow AddNRB_Hard_Copy_To_DESCRow(System.DateTime Date, string Ref, string N_Address, string Subject, string N_Body, decimal Total_NRB_Applicants, string Successful, string UnSuccessful, string Currency, string END_N, string No_Joint_Draft, string S_Draft, string Total_Draft, decimal _Total_Amount_Draft_) {
                NRB_Hard_Copy_To_DESCRow rowNRB_Hard_Copy_To_DESCRow = ((NRB_Hard_Copy_To_DESCRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Date,
                        Ref,
                        N_Address,
                        Subject,
                        N_Body,
                        Total_NRB_Applicants,
                        Successful,
                        UnSuccessful,
                        Currency,
                        END_N,
                        No_Joint_Draft,
                        S_Draft,
                        Total_Draft,
                        _Total_Amount_Draft_};
                rowNRB_Hard_Copy_To_DESCRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNRB_Hard_Copy_To_DESCRow);
                return rowNRB_Hard_Copy_To_DESCRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                NRB_Hard_Copy_To_DESCDataTable cln = ((NRB_Hard_Copy_To_DESCDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new NRB_Hard_Copy_To_DESCDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDate = base.Columns["Date"];
                this.columnRef = base.Columns["Ref"];
                this.columnN_Address = base.Columns["N_Address"];
                this.columnSubject = base.Columns["Subject"];
                this.columnN_Body = base.Columns["N_Body"];
                this.columnTotal_NRB_Applicants = base.Columns["Total NRB Applicants"];
                this.columnSuccessful = base.Columns["Successful"];
                this.columnUnSuccessful = base.Columns["UnSuccessful"];
                this.columnCurrency = base.Columns["Currency"];
                this.columnEND_N = base.Columns["END_N"];
                this.columnNo_Joint_Draft = base.Columns["No_Joint_Draft"];
                this.columnS_Draft = base.Columns["S_Draft"];
                this.columnTotal_Draft = base.Columns["Total_Draft"];
                this._columnTotal_Amount_Draft_ = base.Columns["Total Amount(Draft)"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnRef = new global::System.Data.DataColumn("Ref", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRef);
                this.columnN_Address = new global::System.Data.DataColumn("N_Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnN_Address);
                this.columnSubject = new global::System.Data.DataColumn("Subject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnN_Body = new global::System.Data.DataColumn("N_Body", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnN_Body);
                this.columnTotal_NRB_Applicants = new global::System.Data.DataColumn("Total NRB Applicants", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal_NRB_Applicants);
                this.columnSuccessful = new global::System.Data.DataColumn("Successful", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSuccessful);
                this.columnUnSuccessful = new global::System.Data.DataColumn("UnSuccessful", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnSuccessful);
                this.columnCurrency = new global::System.Data.DataColumn("Currency", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrency);
                this.columnEND_N = new global::System.Data.DataColumn("END_N", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEND_N);
                this.columnNo_Joint_Draft = new global::System.Data.DataColumn("No_Joint_Draft", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNo_Joint_Draft);
                this.columnS_Draft = new global::System.Data.DataColumn("S_Draft", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnS_Draft);
                this.columnTotal_Draft = new global::System.Data.DataColumn("Total_Draft", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal_Draft);
                this._columnTotal_Amount_Draft_ = new global::System.Data.DataColumn("Total Amount(Draft)", typeof(decimal), null, global::System.Data.MappingType.Element);
                this._columnTotal_Amount_Draft_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnTotal_Amount_Draft_");
                this._columnTotal_Amount_Draft_.ExtendedProperties.Add("Generator_UserColumnName", "Total Amount(Draft)");
                base.Columns.Add(this._columnTotal_Amount_Draft_);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NRB_Hard_Copy_To_DESCRow NewNRB_Hard_Copy_To_DESCRow() {
                return ((NRB_Hard_Copy_To_DESCRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new NRB_Hard_Copy_To_DESCRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(NRB_Hard_Copy_To_DESCRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NRB_Hard_Copy_To_DESCRowChanged != null)) {
                    this.NRB_Hard_Copy_To_DESCRowChanged(this, new NRB_Hard_Copy_To_DESCRowChangeEvent(((NRB_Hard_Copy_To_DESCRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NRB_Hard_Copy_To_DESCRowChanging != null)) {
                    this.NRB_Hard_Copy_To_DESCRowChanging(this, new NRB_Hard_Copy_To_DESCRowChangeEvent(((NRB_Hard_Copy_To_DESCRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NRB_Hard_Copy_To_DESCRowDeleted != null)) {
                    this.NRB_Hard_Copy_To_DESCRowDeleted(this, new NRB_Hard_Copy_To_DESCRowChangeEvent(((NRB_Hard_Copy_To_DESCRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NRB_Hard_Copy_To_DESCRowDeleting != null)) {
                    this.NRB_Hard_Copy_To_DESCRowDeleting(this, new NRB_Hard_Copy_To_DESCRowChangeEvent(((NRB_Hard_Copy_To_DESCRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNRB_Hard_Copy_To_DESCRow(NRB_Hard_Copy_To_DESCRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsIPOSubmissionOfIPOcollectionFile_Hardcopy_And_Softcopy ds = new dsIPOSubmissionOfIPOcollectionFile_Hardcopy_And_Softcopy();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NRB_Hard_Copy_To_DESCDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Authorized_Person_DeclarationDataTable : global::System.Data.TypedTableBase<Authorized_Person_DeclarationRow> {
            
            private global::System.Data.DataColumn columnTotal_Unsuccessful_Applicants;
            
            private global::System.Data.DataColumn columnCurrency;
            
            private global::System.Data.DataColumn columnForfeited_Amount;
            
            private global::System.Data.DataColumn columnTotal_Amount;
            
            private global::System.Data.DataColumn columnRef;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnSubject;
            
            private global::System.Data.DataColumn columnBody;
            
            private global::System.Data.DataColumn columnEnds;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Authorized_Person_DeclarationDataTable() {
                this.TableName = "Authorized Person Declaration";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Authorized_Person_DeclarationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Authorized_Person_DeclarationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Total_Unsuccessful_ApplicantsColumn {
                get {
                    return this.columnTotal_Unsuccessful_Applicants;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrencyColumn {
                get {
                    return this.columnCurrency;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Forfeited_AmountColumn {
                get {
                    return this.columnForfeited_Amount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Total_AmountColumn {
                get {
                    return this.columnTotal_Amount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefColumn {
                get {
                    return this.columnRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BodyColumn {
                get {
                    return this.columnBody;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndsColumn {
                get {
                    return this.columnEnds;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Authorized_Person_DeclarationRow this[int index] {
                get {
                    return ((Authorized_Person_DeclarationRow)(this.Rows[index]));
                }
            }
            
            public event Authorized_Person_DeclarationRowChangeEventHandler Authorized_Person_DeclarationRowChanging;
            
            public event Authorized_Person_DeclarationRowChangeEventHandler Authorized_Person_DeclarationRowChanged;
            
            public event Authorized_Person_DeclarationRowChangeEventHandler Authorized_Person_DeclarationRowDeleting;
            
            public event Authorized_Person_DeclarationRowChangeEventHandler Authorized_Person_DeclarationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAuthorized_Person_DeclarationRow(Authorized_Person_DeclarationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Authorized_Person_DeclarationRow AddAuthorized_Person_DeclarationRow(string Total_Unsuccessful_Applicants, string Currency, string Forfeited_Amount, string Total_Amount, string Ref, string Date, string Address, string Subject, string Body, string Ends) {
                Authorized_Person_DeclarationRow rowAuthorized_Person_DeclarationRow = ((Authorized_Person_DeclarationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Total_Unsuccessful_Applicants,
                        Currency,
                        Forfeited_Amount,
                        Total_Amount,
                        Ref,
                        Date,
                        Address,
                        Subject,
                        Body,
                        Ends};
                rowAuthorized_Person_DeclarationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAuthorized_Person_DeclarationRow);
                return rowAuthorized_Person_DeclarationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Authorized_Person_DeclarationDataTable cln = ((Authorized_Person_DeclarationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Authorized_Person_DeclarationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTotal_Unsuccessful_Applicants = base.Columns["Total_Unsuccessful_Applicants"];
                this.columnCurrency = base.Columns["Currency"];
                this.columnForfeited_Amount = base.Columns["Forfeited_Amount"];
                this.columnTotal_Amount = base.Columns["Total_Amount"];
                this.columnRef = base.Columns["Ref"];
                this.columnDate = base.Columns["Date"];
                this.columnAddress = base.Columns["Address"];
                this.columnSubject = base.Columns["Subject"];
                this.columnBody = base.Columns["Body"];
                this.columnEnds = base.Columns["Ends"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTotal_Unsuccessful_Applicants = new global::System.Data.DataColumn("Total_Unsuccessful_Applicants", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal_Unsuccessful_Applicants);
                this.columnCurrency = new global::System.Data.DataColumn("Currency", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrency);
                this.columnForfeited_Amount = new global::System.Data.DataColumn("Forfeited_Amount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnForfeited_Amount);
                this.columnTotal_Amount = new global::System.Data.DataColumn("Total_Amount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal_Amount);
                this.columnRef = new global::System.Data.DataColumn("Ref", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRef);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnSubject = new global::System.Data.DataColumn("Subject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnBody = new global::System.Data.DataColumn("Body", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBody);
                this.columnEnds = new global::System.Data.DataColumn("Ends", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnds);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Authorized_Person_DeclarationRow NewAuthorized_Person_DeclarationRow() {
                return ((Authorized_Person_DeclarationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Authorized_Person_DeclarationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Authorized_Person_DeclarationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Authorized_Person_DeclarationRowChanged != null)) {
                    this.Authorized_Person_DeclarationRowChanged(this, new Authorized_Person_DeclarationRowChangeEvent(((Authorized_Person_DeclarationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Authorized_Person_DeclarationRowChanging != null)) {
                    this.Authorized_Person_DeclarationRowChanging(this, new Authorized_Person_DeclarationRowChangeEvent(((Authorized_Person_DeclarationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Authorized_Person_DeclarationRowDeleted != null)) {
                    this.Authorized_Person_DeclarationRowDeleted(this, new Authorized_Person_DeclarationRowChangeEvent(((Authorized_Person_DeclarationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Authorized_Person_DeclarationRowDeleting != null)) {
                    this.Authorized_Person_DeclarationRowDeleting(this, new Authorized_Person_DeclarationRowChangeEvent(((Authorized_Person_DeclarationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAuthorized_Person_DeclarationRow(Authorized_Person_DeclarationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsIPOSubmissionOfIPOcollectionFile_Hardcopy_And_Softcopy ds = new dsIPOSubmissionOfIPOcollectionFile_Hardcopy_And_Softcopy();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Authorized_Person_DeclarationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataTable1Row : global::System.Data.DataRow {
            
            private DataTable1DataTable tableDataTable1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTable1Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataTable1 = ((DataTable1DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Date {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Ref {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.RefColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Ref\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.RefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subject {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.SubjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Subject\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.SubjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Body {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.BodyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Body\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.BodyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Total_NoOf_Applicants {
                get {
                    try {
                        return ((decimal)(this[this.tableDataTable1.Total_NoOf_ApplicantsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Total_NoOf_Applicants\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.Total_NoOf_ApplicantsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MarketLotTotalTK {
                get {
                    try {
                        return ((decimal)(this[this.tableDataTable1.MarketLotTotalTKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MarketLotTotalTK\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.MarketLotTotalTKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Total_Amount {
                get {
                    try {
                        return ((decimal)(this[this.tableDataTable1.Total_AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Total_Amount\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.Total_AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Total_Block_Amount {
                get {
                    try {
                        return ((decimal)(this[this.tableDataTable1.Total_Block_AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Total_Block_Amount\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.Total_Block_AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string END {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.ENDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'END\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.ENDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tableDataTable1.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tableDataTable1.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRefNull() {
                return this.IsNull(this.tableDataTable1.RefColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRefNull() {
                this[this.tableDataTable1.RefColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableDataTable1.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableDataTable1.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubjectNull() {
                return this.IsNull(this.tableDataTable1.SubjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubjectNull() {
                this[this.tableDataTable1.SubjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBodyNull() {
                return this.IsNull(this.tableDataTable1.BodyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBodyNull() {
                this[this.tableDataTable1.BodyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotal_NoOf_ApplicantsNull() {
                return this.IsNull(this.tableDataTable1.Total_NoOf_ApplicantsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotal_NoOf_ApplicantsNull() {
                this[this.tableDataTable1.Total_NoOf_ApplicantsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMarketLotTotalTKNull() {
                return this.IsNull(this.tableDataTable1.MarketLotTotalTKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMarketLotTotalTKNull() {
                this[this.tableDataTable1.MarketLotTotalTKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotal_AmountNull() {
                return this.IsNull(this.tableDataTable1.Total_AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotal_AmountNull() {
                this[this.tableDataTable1.Total_AmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotal_Block_AmountNull() {
                return this.IsNull(this.tableDataTable1.Total_Block_AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotal_Block_AmountNull() {
                this[this.tableDataTable1.Total_Block_AmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsENDNull() {
                return this.IsNull(this.tableDataTable1.ENDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetENDNull() {
                this[this.tableDataTable1.ENDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class NRB_Hard_Copy_To_DESCRow : global::System.Data.DataRow {
            
            private NRB_Hard_Copy_To_DESCDataTable tableNRB_Hard_Copy_To_DESC;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NRB_Hard_Copy_To_DESCRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNRB_Hard_Copy_To_DESC = ((NRB_Hard_Copy_To_DESCDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableNRB_Hard_Copy_To_DESC.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'NRB Hard Copy To DESC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNRB_Hard_Copy_To_DESC.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Ref {
                get {
                    try {
                        return ((string)(this[this.tableNRB_Hard_Copy_To_DESC.RefColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Ref\' in table \'NRB Hard Copy To DESC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNRB_Hard_Copy_To_DESC.RefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string N_Address {
                get {
                    try {
                        return ((string)(this[this.tableNRB_Hard_Copy_To_DESC.N_AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'N_Address\' in table \'NRB Hard Copy To DESC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNRB_Hard_Copy_To_DESC.N_AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subject {
                get {
                    try {
                        return ((string)(this[this.tableNRB_Hard_Copy_To_DESC.SubjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Subject\' in table \'NRB Hard Copy To DESC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNRB_Hard_Copy_To_DESC.SubjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string N_Body {
                get {
                    try {
                        return ((string)(this[this.tableNRB_Hard_Copy_To_DESC.N_BodyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'N_Body\' in table \'NRB Hard Copy To DESC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNRB_Hard_Copy_To_DESC.N_BodyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Total_NRB_Applicants {
                get {
                    try {
                        return ((decimal)(this[this.tableNRB_Hard_Copy_To_DESC.Total_NRB_ApplicantsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Total NRB Applicants\' in table \'NRB Hard Copy To DESC\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableNRB_Hard_Copy_To_DESC.Total_NRB_ApplicantsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Successful {
                get {
                    try {
                        return ((string)(this[this.tableNRB_Hard_Copy_To_DESC.SuccessfulColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Successful\' in table \'NRB Hard Copy To DESC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNRB_Hard_Copy_To_DESC.SuccessfulColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnSuccessful {
                get {
                    try {
                        return ((string)(this[this.tableNRB_Hard_Copy_To_DESC.UnSuccessfulColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnSuccessful\' in table \'NRB Hard Copy To DESC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNRB_Hard_Copy_To_DESC.UnSuccessfulColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Currency {
                get {
                    try {
                        return ((string)(this[this.tableNRB_Hard_Copy_To_DESC.CurrencyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Currency\' in table \'NRB Hard Copy To DESC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNRB_Hard_Copy_To_DESC.CurrencyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string END_N {
                get {
                    try {
                        return ((string)(this[this.tableNRB_Hard_Copy_To_DESC.END_NColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'END_N\' in table \'NRB Hard Copy To DESC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNRB_Hard_Copy_To_DESC.END_NColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string No_Joint_Draft {
                get {
                    try {
                        return ((string)(this[this.tableNRB_Hard_Copy_To_DESC.No_Joint_DraftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'No_Joint_Draft\' in table \'NRB Hard Copy To DESC\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableNRB_Hard_Copy_To_DESC.No_Joint_DraftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string S_Draft {
                get {
                    try {
                        return ((string)(this[this.tableNRB_Hard_Copy_To_DESC.S_DraftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'S_Draft\' in table \'NRB Hard Copy To DESC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNRB_Hard_Copy_To_DESC.S_DraftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Total_Draft {
                get {
                    try {
                        return ((string)(this[this.tableNRB_Hard_Copy_To_DESC.Total_DraftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Total_Draft\' in table \'NRB Hard Copy To DESC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNRB_Hard_Copy_To_DESC.Total_DraftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal _Total_Amount_Draft_ {
                get {
                    try {
                        return ((decimal)(this[this.tableNRB_Hard_Copy_To_DESC._Total_Amount_Draft_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Total Amount(Draft)\' in table \'NRB Hard Copy To DESC\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableNRB_Hard_Copy_To_DESC._Total_Amount_Draft_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tableNRB_Hard_Copy_To_DESC.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tableNRB_Hard_Copy_To_DESC.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRefNull() {
                return this.IsNull(this.tableNRB_Hard_Copy_To_DESC.RefColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRefNull() {
                this[this.tableNRB_Hard_Copy_To_DESC.RefColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsN_AddressNull() {
                return this.IsNull(this.tableNRB_Hard_Copy_To_DESC.N_AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetN_AddressNull() {
                this[this.tableNRB_Hard_Copy_To_DESC.N_AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubjectNull() {
                return this.IsNull(this.tableNRB_Hard_Copy_To_DESC.SubjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubjectNull() {
                this[this.tableNRB_Hard_Copy_To_DESC.SubjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsN_BodyNull() {
                return this.IsNull(this.tableNRB_Hard_Copy_To_DESC.N_BodyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetN_BodyNull() {
                this[this.tableNRB_Hard_Copy_To_DESC.N_BodyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotal_NRB_ApplicantsNull() {
                return this.IsNull(this.tableNRB_Hard_Copy_To_DESC.Total_NRB_ApplicantsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotal_NRB_ApplicantsNull() {
                this[this.tableNRB_Hard_Copy_To_DESC.Total_NRB_ApplicantsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSuccessfulNull() {
                return this.IsNull(this.tableNRB_Hard_Copy_To_DESC.SuccessfulColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSuccessfulNull() {
                this[this.tableNRB_Hard_Copy_To_DESC.SuccessfulColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnSuccessfulNull() {
                return this.IsNull(this.tableNRB_Hard_Copy_To_DESC.UnSuccessfulColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnSuccessfulNull() {
                this[this.tableNRB_Hard_Copy_To_DESC.UnSuccessfulColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrencyNull() {
                return this.IsNull(this.tableNRB_Hard_Copy_To_DESC.CurrencyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrencyNull() {
                this[this.tableNRB_Hard_Copy_To_DESC.CurrencyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEND_NNull() {
                return this.IsNull(this.tableNRB_Hard_Copy_To_DESC.END_NColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEND_NNull() {
                this[this.tableNRB_Hard_Copy_To_DESC.END_NColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNo_Joint_DraftNull() {
                return this.IsNull(this.tableNRB_Hard_Copy_To_DESC.No_Joint_DraftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNo_Joint_DraftNull() {
                this[this.tableNRB_Hard_Copy_To_DESC.No_Joint_DraftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsS_DraftNull() {
                return this.IsNull(this.tableNRB_Hard_Copy_To_DESC.S_DraftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetS_DraftNull() {
                this[this.tableNRB_Hard_Copy_To_DESC.S_DraftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotal_DraftNull() {
                return this.IsNull(this.tableNRB_Hard_Copy_To_DESC.Total_DraftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotal_DraftNull() {
                this[this.tableNRB_Hard_Copy_To_DESC.Total_DraftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Total_Amount_Draft_Null() {
                return this.IsNull(this.tableNRB_Hard_Copy_To_DESC._Total_Amount_Draft_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_Total_Amount_Draft_Null() {
                this[this.tableNRB_Hard_Copy_To_DESC._Total_Amount_Draft_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Authorized_Person_DeclarationRow : global::System.Data.DataRow {
            
            private Authorized_Person_DeclarationDataTable tableAuthorized_Person_Declaration;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Authorized_Person_DeclarationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAuthorized_Person_Declaration = ((Authorized_Person_DeclarationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Total_Unsuccessful_Applicants {
                get {
                    try {
                        return ((string)(this[this.tableAuthorized_Person_Declaration.Total_Unsuccessful_ApplicantsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Total_Unsuccessful_Applicants\' in table \'Authorized Person " +
                                "Declaration\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAuthorized_Person_Declaration.Total_Unsuccessful_ApplicantsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Currency {
                get {
                    try {
                        return ((string)(this[this.tableAuthorized_Person_Declaration.CurrencyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Currency\' in table \'Authorized Person Declaration\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableAuthorized_Person_Declaration.CurrencyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Forfeited_Amount {
                get {
                    try {
                        return ((string)(this[this.tableAuthorized_Person_Declaration.Forfeited_AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Forfeited_Amount\' in table \'Authorized Person Declaration\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAuthorized_Person_Declaration.Forfeited_AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Total_Amount {
                get {
                    try {
                        return ((string)(this[this.tableAuthorized_Person_Declaration.Total_AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Total_Amount\' in table \'Authorized Person Declaration\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableAuthorized_Person_Declaration.Total_AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Ref {
                get {
                    try {
                        return ((string)(this[this.tableAuthorized_Person_Declaration.RefColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Ref\' in table \'Authorized Person Declaration\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAuthorized_Person_Declaration.RefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Date {
                get {
                    try {
                        return ((string)(this[this.tableAuthorized_Person_Declaration.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'Authorized Person Declaration\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAuthorized_Person_Declaration.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableAuthorized_Person_Declaration.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'Authorized Person Declaration\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableAuthorized_Person_Declaration.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subject {
                get {
                    try {
                        return ((string)(this[this.tableAuthorized_Person_Declaration.SubjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Subject\' in table \'Authorized Person Declaration\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableAuthorized_Person_Declaration.SubjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Body {
                get {
                    try {
                        return ((string)(this[this.tableAuthorized_Person_Declaration.BodyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Body\' in table \'Authorized Person Declaration\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAuthorized_Person_Declaration.BodyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Ends {
                get {
                    try {
                        return ((string)(this[this.tableAuthorized_Person_Declaration.EndsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Ends\' in table \'Authorized Person Declaration\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAuthorized_Person_Declaration.EndsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotal_Unsuccessful_ApplicantsNull() {
                return this.IsNull(this.tableAuthorized_Person_Declaration.Total_Unsuccessful_ApplicantsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotal_Unsuccessful_ApplicantsNull() {
                this[this.tableAuthorized_Person_Declaration.Total_Unsuccessful_ApplicantsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrencyNull() {
                return this.IsNull(this.tableAuthorized_Person_Declaration.CurrencyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrencyNull() {
                this[this.tableAuthorized_Person_Declaration.CurrencyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsForfeited_AmountNull() {
                return this.IsNull(this.tableAuthorized_Person_Declaration.Forfeited_AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetForfeited_AmountNull() {
                this[this.tableAuthorized_Person_Declaration.Forfeited_AmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotal_AmountNull() {
                return this.IsNull(this.tableAuthorized_Person_Declaration.Total_AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotal_AmountNull() {
                this[this.tableAuthorized_Person_Declaration.Total_AmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRefNull() {
                return this.IsNull(this.tableAuthorized_Person_Declaration.RefColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRefNull() {
                this[this.tableAuthorized_Person_Declaration.RefColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tableAuthorized_Person_Declaration.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tableAuthorized_Person_Declaration.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableAuthorized_Person_Declaration.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableAuthorized_Person_Declaration.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubjectNull() {
                return this.IsNull(this.tableAuthorized_Person_Declaration.SubjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubjectNull() {
                this[this.tableAuthorized_Person_Declaration.SubjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBodyNull() {
                return this.IsNull(this.tableAuthorized_Person_Declaration.BodyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBodyNull() {
                this[this.tableAuthorized_Person_Declaration.BodyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndsNull() {
                return this.IsNull(this.tableAuthorized_Person_Declaration.EndsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndsNull() {
                this[this.tableAuthorized_Person_Declaration.EndsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataTable1RowChangeEvent : global::System.EventArgs {
            
            private DataTable1Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1RowChangeEvent(DataTable1Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class NRB_Hard_Copy_To_DESCRowChangeEvent : global::System.EventArgs {
            
            private NRB_Hard_Copy_To_DESCRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NRB_Hard_Copy_To_DESCRowChangeEvent(NRB_Hard_Copy_To_DESCRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NRB_Hard_Copy_To_DESCRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Authorized_Person_DeclarationRowChangeEvent : global::System.EventArgs {
            
            private Authorized_Person_DeclarationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Authorized_Person_DeclarationRowChangeEvent(Authorized_Person_DeclarationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Authorized_Person_DeclarationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591